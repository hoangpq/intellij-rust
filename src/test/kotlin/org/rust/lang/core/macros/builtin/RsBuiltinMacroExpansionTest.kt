/*
 * Use of this source code is governed by the MIT license that can be
 * found in the LICENSE file.
 */

package org.rust.lang.core.macros.builtin

import org.intellij.lang.annotations.Language
import org.rust.lang.core.macros.RsMacroExpansionTestBase

/**
 * Some tests are generated by this Rust program:
 *
 * ```
 * fn main() {
 *     let vars = &[
 *         ("concat!()", concat!()),
 *         ("concat!(1)", concat!(1)),
 *         ("concat!(1, 2)", concat!(1, 2)),
 *         ("concat!(1, 2, 3)", concat!(1, 2, 3)),
 *         ("concat!(1i32)", concat!(1i32)),
 *         ("concat!(1u8, 2u16, 3u32, 4u64, 5u128)", concat!(1u8, 2u16, 3u32, 4u64, 5u128)),
 *         ("concat!(1f32, 2f64)", concat!(1f32, 2f64)),
 *         ("concat!(0.1)", concat!(0.1)),
 *         ("concat!(0.1f32, 0.2f64)", concat!(0.1f32, 0.2f64)),
 *         ("concat!(0.)", concat!(0.)),
 *         ("concat!(0.00000000000000000000001)", concat!(0.00000000000000000000001)),
 *         ("concat!(1_000__00__)", concat!(1_000__00__)),
 *         ("concat!(1_000__00__.001_11__1010)", concat!(1_000__00__.001_11__1010)),
 *         ("concat!(0.1e-12)", concat!(0.1e-12)),
 *         ("concat!(0.1e-12f32, 0.1e-12f64)", concat!(0.1e-12f32, 0.1e-12f64)),
 *         (r#"concat!(true, false)"#, concat!(true, false)),
 *         (r#"concat!("1", "2", "3")"#, concat!("1", "2", "3")),
 *         (r#"concat!("foo", 2, "bar", 4)"#, concat!("foo", 2, "bar", 4)),
 *         (r#"concat!('a', 'b')"#, concat!('a', "b")),
 *     ];
 *
 *     for (i, (s, c)) in vars.iter().enumerate() {
 *         println!(r###"    fun `test {}`() = doStringTest("{}", "{}")"###, i, s, c);
 *         println!();
 *     }
 * }
 * ```
 */
class RsBuiltinMacroExpansionTest : RsMacroExpansionTestBase() {
    fun `test 0`() = doStringTest("concat!()", "")

    fun `test 1`() = doStringTest("concat!(1)", "1")

    fun `test 2`() = doStringTest("concat!(1, 2)", "12")

    fun `test 3`() = doStringTest("concat!(1, 2, 3)", "123")

    fun `test 4`() = doStringTest("concat!(1i32)", "1")

    fun `test 5`() = doStringTest("concat!(1u8, 2u16, 3u32, 4u64, 5u128)", "12345")

    fun `test 6`() = doStringTest("concat!(1f32, 2f64)", "12")

    fun `test 7`() = doStringTest("concat!(0.1)", "0.1")

    fun `test 8`() = doStringTest("concat!(0.1f32, 0.2f64)", "0.10.2")

    fun `test 9`() = doStringTest("concat!(0.)", "0.")

    fun `test 10`() = doStringTest("concat!(0.00000000000000000000001)", "0.00000000000000000000001")

    fun `test 11`() = doStringTest("concat!(1_000__00__)", "100000")

    fun `test 12`() = doStringTest("concat!(1_000__00__.001_11__1010)", "100000.001111010")

    fun `test 13`() = doStringTest("concat!(0.1e-12)", "0.1e-12")

    fun `test 14`() = doStringTest("concat!(0.1e-12f32, 0.1e-12f64)", "0.1e-120.1e-12")

    fun `test 15`() = doStringTest("concat!(true, false)", "truefalse")

    fun `test 16`() = doStringTest("""concat!("1", "2", "3")""", "123")

    fun `test 17`() = doStringTest("""concat!("foo", 2, "bar", 4)""", "foo2bar4")

    fun `test 18`() = doStringTest("concat!('a', 'b')", "ab")

    fun `test number of hashes in raw string 1`() = doTest("""
        const C: &str = concat!(r#"123"#);
    """, """
        "123"
    """)
    fun `test number of hashes in raw string 2`() = doTest("""
        const C: &str = concat!(r#"1###3"#);
    """, """
        "1###3"
    """)

    fun `test number of hashes in raw string 3`() = doTest("""
        const C: &str = concat!(r#" " "#);
    """, """
        r#" " "#
    """)

    fun `test number of hashes in raw string 4`() = doTest("""
        const C: &str = concat!(r##" "# "##);
    """, """
        r##" "# "##
    """)

    fun `test number of hashes in raw string 5`() = doTest("""
        const C: &str = concat!(r###" "## "###);
    """, """
        r###" "## "###
    """)

    private fun doStringTest(
        @Language("Rust", prefix = "const C: &str = ", suffix = ";") code: String,
        expectedExpansion: String
    ) {
        doTest("const C: &str = $code", "\"$expectedExpansion\"")
    }

    private fun doTest(
        @Language("Rust") code: String,
        expectedExpansion: String
    ) {
        val fullCode = """
            #[rustc_builtin_macro]
            macro_rules! concat { () => {}; }
            $code
        """
        super.doTest(fullCode, expectedExpansion)
    }
}
